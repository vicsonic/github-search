// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation

public enum GitHubSearchKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xf3, 0x10, 0x29, 0x41, 0xe6, 0xcf, 0xdc, 0x8e, 0x15, 0xfb, 0xa2, 0x88, 0xaf, 0x64, 0xa0, 0xa, 0x8, 0x5b, 0xab, 0x8a, 0x56, 0x6d, 0x75, 0x43, 0x81, 0x7d, 0x90, 0x85, 0x20, 0x61, 0x28, 0x84, 0x87, 0xea, 0xcc, 0xd0, 0xa7, 0x2, 0xe9, 0xf2, 0xd3, 0x35, 0xdb, 0x74, 0x15, 0x77, 0x2e, 0x4f, 0x95, 0x82, 0xcb, 0xad, 0x12, 0x5c, 0xb3, 0x49, 0x33, 0xcd, 0x6c, 0x17, 0xc4, 0xfb, 0xb9, 0xc3
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension GitHubSearchKeys {
    struct Global: GitHubSearchKeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let gitHubToken: String = {
            let encoded: [UInt8] = [
                0x94, 0x78, 0x59, 0x1e, 0xb3, 0x87, 0x8d, 0xb9, 0x7e, 0x95, 0xe8, 0xfc, 0xc6, 0, 0x99, 0x60, 0x46, 0x3c, 0xca, 0xbe, 0x2e, 0x25, 0x12, 0x2b, 0xcc, 0x1a, 0xf3, 0xdd, 0x58, 0x59, 0x43, 0xd6, 0xf0, 0xdb, 0xfd, 0x9b, 0xec, 0x33, 0x8b, 0xbb
            ]
            return GitHubSearchKeys.decode(encoded: encoded, cipher: GitHubSearchKeys.salt)
        }()
    }
}

